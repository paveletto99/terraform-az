# pr:
#   branches:
#     include: ["master", "develop"]

trigger:
  - 'master'
  - 'develop'

pool:
  vmImage: ubuntu-22.04

variables:
  FOLDER_CTX: $(System.DeafultWorkingDirectory)/environments
  TERRA_ENV_NAME: $(Build.SourceBranchName)
  TERRA_VER: '0.14.10'

# TODO terra_env need to be conditional
#     ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
#     artifactName: 'prod'
# ${{ else }}:
#     artifactName: 'dev'

stages:
  - stage: terraform_build
    jobs:
      - job: terraform_plan
        variables:
          TFLINT_BUNDLE_VER: 'v0.40.1.0' # leave the 'v' char here
          GO_VER: '1.19'
        steps:
          # - task: AzureKeyVault@1
          #   inputs:
          #     azureSubscription: "book-azure-access"
          #     KeyVaultName: "book-keyvault"
          #     SecretsFilter: "state-resource-group, state-storage-container, state-storage-account, state-file-name, state-sas-token, client-id, client-secret, subscription-id, tenant-id"
          #   displayName: "Get key vault secrets as pipeline variables"
          - bash: |
              sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
              wget -O- https://apt.releases.hashicorp.com/gpg | \
              gpg --dearmor | \
              sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
              gpg --no-default-keyring \
              --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
              --fingerprint
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
              https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
              sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt-get update && sudo apt-get install terraform=$(TERRA_VER) 
              terraform -help
            displayName: 'Install Terraform'
          - bash: |
              curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
              mkdir -p ~/azurerm_linter/
              curl -Ls https://github.com/terraform-linters/tflint-ruleset-azurerm/releases/download/v0.12.0/tflint-ruleset-azurerm_linux_amd64.zip -o tflint-ruleset-azurerm_linux_amd64.zip && unzip tflint-ruleset-azurerm_linux_amd64.zip -d ~/azurerm_linter/ && rm tflint-ruleset-azurerm_linux_amd64.zip
              mkdir -p ~/.tflint.d/plugins
              mv ~/azurerm_linter/tflint-ruleset-azurerm ~/.tflint.d/plugins
            displayName: 'Install tflint'
            enabled: 'false'
          - bash: |
              terraform -chdir=environments init
              terraform workspace new ${TERRA_WS}
            env:
              TERRA_WS: $(TERRA_ENV_NAME)
            displayName: 'Terraform init'
          - bash: |
              terraform validate
              podman run --rm -v "${PWD}/environments:/data" -t ghcr.io/terraform-linters/tflint-bundle:$(TFLINT_BUNDLE_VER)
            continueOnError: 'true'
            displayName: 'Run Terraform Lint'
          - bash: |
              podman run --rm -it -v "${PWD}:/src" docker.io/aquasec/tfsec:latest /src
            continueOnError: 'true'
            displayName: 'Terraform Security Scan'
            # TOFIX checkov now only scan terraform MUST be used also for k8s manifests
          - bash: |
              podman run --rm --tty -v "${PWD}:/tf" --workdir /tf bridgecrew/checkov --directory /tf -o sarif --output-file-path ./out
              ls -lah out
            continueOnError: 'true'
            displayName: 'Terraform Static Analysis & SCA'
            # Go tool installer v0
            # Find in cache or download a specific version of Go and add it to the PATH.
          - task: GoTool@0
            inputs:
              version: $(GO_VER)
            displayName: 'Install Go'
          # TODO infracost
          # TODO public artifacts with results
          # Publish pipeline artifacts
          # Publish (upload) a file or directory as a named artifact for the current run
          # - task: PublishPipelineArtifact@1
          #   displayName: 'Publish reports'
          #   inputs:
          #     targetPath: $(System.DefaultWorkingDirectory)/out/results_sarif.sarif
          #     artifactName: 'checkov-result.sarif'
          - bash: |
              terraform workspace select ${WS_NAME}
              terraform -chdir=environments plan
            env:
              WS_NAME: $(TERRA_ENV_NAME)
            displayName: 'Terraform plan'

  # - stage: dev_env
  # - stage: uat_env
  # - stage: prod_env
